#!/usr/bin/env python3

import yaml 
from argparse import ArgumentParser

from src.utils.config import Config
from src.utils.defaults import Defaults
from src.data import DataModules 
from src.models import ModelModules 
from src.metrics import Metrics 
from src.plots import Plots

def parser(): 
    parser = ArgumentParser()
    parser.add_argument("--config", '-c', default=None)

    # Model 
    parser.add_argument("--model_path", '-m', default=None)
    parser.add_argument("--model_engine", '-e', default=Defaults['model']['model_engine'], choices=ModelModules.keys())

    # Data 
    parser.add_argument("--data_path", '-d', default=None)
    parser.add_argument("--data_engine", '-g', default=Defaults['data']['data_engine'], choices=DataModules.keys())

    # Common
    parser.add_argument("--out_dir", default=Defaults['common']['out_dir'])

    # List of metrics (cannot supply specific kwargs)
    parser.add_argument("--metrics", nargs='+', default=Defaults['metrics'].keys(), choices=Metrics.keys())

    # List of plots 
    parser.add_argument("--plots", nargs='+', default=Defaults['plots'].keys(), choices=Plots.keys())


    args = parser.parse_args()
    if args.config is not None: 
        config = Config(args.config)

    else: 
        tmp_config = './DeepDiagonistics/temp/temp_config.yml' # TODO Un-hardcode 
        input_yaml = vars(args) # TODO Sections
        yaml.dump(input_yaml, open(tmp_config, "w"))
        config = Config(tmp_config)

    return config


if __name__ == "__main__": 
    config = parser()

    model_path = config.get_item("model", "model_path")
    model_engine = config.get_item("model", "model_engine")
    model = ModelModules[model_engine](model_path)

    data_path = config.get_item("data", "data_path")
    data_engine = config.get_item("data", "data_engine")
    data = DataModules[data_engine](data_path)

    out_dir = config.get_item("common", "out_dir")

    metrics = config.get_section("metrics")
    plots = config.get_section("plots")

    for metrics_name, metrics_args in metrics.items(): 
        Metrics[metrics_name](model, data, **metrics_args)()

    for plot_name, plot_args in plots.items(): 
        Plots[plot_name](model, data, save=True, show=False, out_dir=out_dir)(**plot_args)